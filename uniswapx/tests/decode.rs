use anyhow::anyhow;
use substreams_ethereum::pb::eth::v2::Call;
use uniswap_x_substreams::{abi::dutch_order_executor::functions::ExecuteWithCallback, uniswap_structs::ExclusiveDutchOrder};

const BASE64DECODE: &str = "DTNYhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGU8DNcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZTwNEwAAAAAAAAAAAAAAADuSYKko0w8qBpVygF+7aID8cZoZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQAAAAAAAAAAAAAAABrF1R06JCUxE2pi5VO7erElScdDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYMJ4mq6HQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANgwniarodAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAGAA2kdIMGKg1zS6PcdXbOagtkXEAAAAAAAAAAAAAAAAlT6XWwOHhL6ZY3Y0k8mn02UERBQEaDKaNNTm5Cde5oj6epVm0nZjOn7Mqg/iBgW8uUQ7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABlPA0fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHnlwMtuNfRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdCaIGZRak0AAAAAAAAAAAAAAACVPpdbA4eEvpljdjSTyafTZQREFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC7hAr3DD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALKs2hSiEQAAAAAAAAAAAAAAADeo8pVhJgLyd00zHlYr6eYbg6MnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEEj2T6QSR2t2gaLyswIbjtqRahdqoXUgqdY5gBGWFfCky4TeLe8GYFqiOBzCQMasb2Ch/EAbWrjPmqF1U6jVEdHHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";

#[test]
fn decode_execute_with_calldata() -> anyhow::Result<()> {
    let input = base64::decode(BASE64DECODE)?;

    let signature = &input[0..4];
    const METHOD_ID: [u8; 4] = [13u8, 51u8, 88u8, 132u8];
    assert_eq!(signature, METHOD_ID);

    let call = Call {
        input,
        ..Default::default()
    };

    let execute_with_callback = ExecuteWithCallback::decode(&call).map_err(|s| anyhow!(s))?;
    let (order, _signature) = execute_with_callback.order;
    let dutch_order = ExclusiveDutchOrder::try_from(order)?;
    println!("dutch order: {:?}", dutch_order);
    Ok(())
}

